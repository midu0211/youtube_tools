# -*- coding: utf-8 -*-
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import datetime
import json
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
import os
import threading
import time
import queue
import pytz
import random
from ttkthemes import ThemedTk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
import matplotlib.ticker as mticker
import math
import webbrowser
from PIL import Image, ImageTk
from urllib.parse import urlparse, parse_qs

# --- H·∫±ng s·ªë v√† Bi·∫øn to√†n c·ª•c ---
CLIENT_SECRETS_FILE = 'client_secret.json'
ALL_SCOPES = [
    'https://www.googleapis.com/auth/youtube.upload',
    'https://www.googleapis.com/auth/youtube.readonly',
    'https://www.googleapis.com/auth/youtube.force-ssl' # Scope n√†y bao g·ªìm c·∫£ quy·ªÅn x√≥a video
]
API_SERVICE_NAME = 'youtube'
API_VERSION = 'v3'
SCHEDULED_POSTS_FILE = 'scheduled_posts.json'
COMMENT_TEMPLATES_FILE = 'comment_templates.json'
VIETNAM_TZ_STR = 'Asia/Ho_Chi_Minh'

status_queue = queue.Queue()
youtube_service_global = None
auth_lock = threading.Lock()
scheduled_posts_data = []
trending_videos_data = []
comment_templates_list = []
my_playlists = {}
vietnam_tz = None
current_random_comment = ""
icons = {}

# --- C√°c bi·∫øn cho th√†nh ph·∫ßn giao di·ªán (UI) ---
status_bar_instance = None
upload_now_btn, schedule_btn, clear_btn = None, None, None
fetch_trending_btn = None
post_comment_btn, pick_comment_btn, add_comment_btn, delete_comment_btn = None, None, None, None
analyze_video_btn, analyze_comments_btn = None, None
analytics_video_combobox, analytics_chart_frame, analytics_report_text = None, None, None
canvas_widget = None
num_comments_entry, generate_comments_btn = None, None
custom_video_url_entry = None
log_text_widget = None
playlist_combobox, refresh_playlists_btn = None, None
video_id_entry_for_comment = None

# --- M·∫´u b√¨nh lu·∫≠n v√† t·ª´ kh√≥a ph√¢n t√≠ch c·∫£m x√∫c ---
MEANINGFUL_COMMENT_BASES = ["Video tuy·ªát v·ªùi!", "N·ªôi dung r·∫•t hay, c·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª.", "M√¨nh r·∫•t th√≠ch video n√†y.", "L√†m t·ªët l·∫Øm! Ti·∫øp t·ª•c ph√°t huy nh√©.", "Video n√†y th·∫≠t s·ª± h·ªØu √≠ch.", "Ch·∫•t l∆∞·ª£ng video tuy·ªát v·ªùi.", "Wow, ·∫•n t∆∞·ª£ng th·∫≠t!", "C·∫£m ∆°n v√¨ nh·ªØng th√¥ng tin gi√° tr·ªã.", "R·∫•t s√°ng t·∫°o!", "Hay l·∫Øm b·∫°n ∆°i!", "Xem xong th·∫•y c√≥ th√™m ƒë·ªông l·ª±c. C·∫£m ∆°n b·∫°n!", "Ch√∫c m·ª´ng b·∫°n ƒë√£ c√≥ m·ªôt video th√†nh c√¥ng!", "Y√™u b·∫°n!", "Qu√° ƒë·ªânh!", "Hay qu√° ƒëi m·∫•t!", "Tuy·ªát v·ªùi! B·∫°n l√†m r·∫•t t·ªët.", "Video n√†y x·ª©ng ƒë√°ng tri·ªáu view!", "Tuy·ªát c√∫ m√®o!", "Tuy·ªát!", "Hay!", "Ch·∫•t!", "ƒê·ªânh!", "Oke b·∫°n ∆°i.", "Th√≠ch nha.", "Good job!", "Amazing!", "Perfect!", "Awesome!", "C·∫£m ∆°n b·∫°n nhi·ªÅu.", "Thanks for sharing!", "R·∫•t bi·∫øt ∆°n b·∫°n.", "C·∫£m ∆°n v√¨ ƒë√£ l√†m video n√†y.", "Thank you!", "Video hay, ti·∫øp t·ª•c ph√°t huy nh√© k√™nh.", "N·ªôi dung ch·∫•t l∆∞·ª£ng, m√¨nh ƒë√£ sub k√™nh.", "Video √Ω nghƒ©a qu√°.", "M√¨nh ƒë√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu ƒëi·ªÅu t·ª´ video n√†y.", "Xem gi·∫£i tr√≠ m√† v·∫´n c√≥ ki·∫øn th·ª©c.", "ƒê√∫ng th·ª© m√¨nh ƒëang t√¨m."]
EMOJIS_LIST = ["üëç", "‚ù§Ô∏è", "üéâ", "üíØ", "üî•", "üòÆ", "üòÇ", "‚ú®", "üåü", "üòä", "üòÉ", "üòç", "üôè", "üôå", "üëå", "üíñ", "ü§£", "ü§©"]
COMMENT_SUFFIXES = ["R·∫•t mong video ti·∫øp theo c·ªßa b·∫°n!", "C·ªë g·∫Øng l√™n nh√©!", "Ch√∫c k√™nh ng√†y c√†ng ph√°t tri·ªÉn!", "Tuy·ªát v·ªùi √¥ng m·∫∑t tr·ªùi!", "Lu√¥n ·ªßng h·ªô b·∫°n!", "5 sao cho video n√†y!"]
POSITIVE_KEYWORDS_VI = ['tuy·ªát v·ªùi', 'hay', 'h·ªØu √≠ch', 'c·∫£m ∆°n', 'th√≠ch', 'ch·∫•t l∆∞·ª£ng', 'ƒë·ªânh', 's√°ng t·∫°o', 't·ªët', '√Ω nghƒ©a', 'y√™u', 'good', 'amazing', 'perfect', 'awesome', 'nice']
NEGATIVE_KEYWORDS_VI = ['t·ªá', 'd·ªü', 'ch√°n', 'gh√©t', 'x·∫•u', 'kh√¥ng hay', 'nh·∫£m', 'bad', 'dislike', 't·ªën th·ªùi gian']

# --- L·ªõp v√† H√†m h·ªó tr·ª£ giao di·ªán ---
class PlaceholderEntry(ttk.Entry):
    def __init__(self, master=None, placeholder="PLACEHOLDER", color='grey', **kwargs):
        super().__init__(master, **kwargs)
        self.placeholder = placeholder
        self.placeholder_color = color
        self.default_fg_color = self['foreground']
        self.bind("<FocusIn>", self.on_focus_in)
        self.bind("<FocusOut>", self.on_focus_out)
        self.put_placeholder()

    def put_placeholder(self):
        is_empty = not self.get()
        if is_empty:
            self.insert(0, self.placeholder)
            self['foreground'] = self.placeholder_color

    def on_focus_in(self, e):
        if self.get() == self.placeholder and self['foreground'] == self.placeholder_color:
            self.delete('0', 'end')
            self['foreground'] = self.default_fg_color

    def on_focus_out(self, e):
        if not self.get():
            self.put_placeholder()
    
    def get_value(self):
        content = self.get()
        if content == self.placeholder and self['foreground'] == self.placeholder_color:
            return ""
        return content

def load_icons():
    """T·∫£i t·∫•t c·∫£ c√°c icon c·∫ßn thi·∫øt cho giao di·ªán."""
    icon_files = ['browse', 'upload', 'schedule', 'clear', 'refresh', 'delete', 'trending', 'add', 'pick', 'post', 'generate', 'analyze', 'comment_analyze']
    try:
        for name in icon_files:
            icons[name] = ImageTk.PhotoImage(Image.open(f"icons/{name}.png").resize((16, 16), Image.LANCZOS))
        log_status("T·∫£i icon th√†nh c√¥ng. (Y√™u c·∫ßu c√≥ th∆∞ m·ª•c 'icons')")
    except Exception as e:
        log_status(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ t·∫£i icon. L·ªói: {e}. ·ª®ng d·ª•ng s·∫Ω ch·∫°y kh√¥ng c√≥ icon.")

def create_context_menu(widget):
    menu = tk.Menu(widget, tearoff=0)
    widget.bind("<Button-3>", lambda event: show_context_menu(event, menu, widget))
    return menu

def show_context_menu(event, menu, widget):
    iid = widget.identify_row(event.y)
    if iid:
        widget.selection_set(iid)
        menu.post(event.x_root, event.y_root)

# --- Thanh tr·∫°ng th√°i v√† Ghi nh·∫≠t k√Ω ---
class StatusBar(ttk.Frame):
    def __init__(self, master, **kwargs):
        super().__init__(master, **kwargs)
        self.label = ttk.Label(self, text="Ready", anchor=tk.W, padding=(5, 2))
        self.label.pack(fill=tk.X, expand=True, side=tk.LEFT)
        self.progress = ttk.Progressbar(self, orient=tk.HORIZONTAL, length=150, mode='indeterminate')
    def set_text(self, text): self.label.config(text=text)
    def clear(self): self.set_text("Ready")
    def show_progress(self):
        self.progress.pack(side=tk.RIGHT, padx=5, pady=2)
        self.progress.start(20)
    def hide_progress(self):
        self.progress.stop()
        self.progress.pack_forget()

def log_status(message):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"
    print(log_message)
    if status_bar_instance and root.winfo_exists():
        try:
            root.after(0, status_bar_instance.set_text, message)
        except Exception: pass
    if log_text_widget and root.winfo_exists():
        try:
            root.after(0, append_to_log_widget, log_message + "\n")
        except Exception: pass

def append_to_log_widget(message):
    log_text_widget.config(state=tk.NORMAL)
    log_text_widget.insert(tk.END, message)
    log_text_widget.see(tk.END)
    log_text_widget.config(state=tk.DISABLED)

# --- Chuy·ªÉn ƒë·ªïi m√∫i gi·ªù ---
def initialize_timezone():
    global vietnam_tz
    try:
        vietnam_tz = pytz.timezone(VIETNAM_TZ_STR)
        log_status(f"M√∫i gi·ªù '{VIETNAM_TZ_STR}' ƒë√£ ƒë∆∞·ª£c t·∫£i.")
        return True
    except pytz.exceptions.UnknownTimeZoneError:
        log_status(f"L·ªñI: Kh√¥ng t√¨m th·∫•y m√∫i gi·ªù '{VIETNAM_TZ_STR}'.")
        messagebox.showerror("L·ªói M√∫i Gi·ªù", f"Kh√¥ng th·ªÉ t√¨m th·∫•y m√∫i gi·ªù '{VIETNAM_TZ_STR}'.")
        return False

def convert_utc_to_vn_str(utc_iso_string, fmt='%Y-%m-%d %H:%M:%S'):
    if not utc_iso_string or not vietnam_tz: return "N/A"
    try:
        utc_dt = datetime.datetime.fromisoformat(utc_iso_string.replace('Z', '+00:00'))
        return utc_dt.astimezone(vietnam_tz).strftime(fmt)
    except (ValueError, TypeError): return "Invalid Date"

def convert_vn_str_to_utc_iso(vn_time_str, fmt='%Y-%m-%d %H:%M:%S'):
    if not vietnam_tz: return None, None
    try:
        vn_dt = vietnam_tz.localize(datetime.datetime.strptime(vn_time_str, fmt))
        utc_dt = vn_dt.astimezone(pytz.utc)
        return utc_dt, utc_dt.strftime('%Y-%m-%dT%H:%M:%SZ')
    except ValueError:
        messagebox.showerror("ƒê·ªãnh D·∫°ng Th·ªùi Gian Sai", f"ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá.\nVui l√≤ng s·ª≠ d·ª•ng: YYYY-MM-DD HH:MM:SS.")
        return None, None

def extract_video_id_from_url(url):
    """Tr√≠ch xu·∫•t Video ID t·ª´ m·ªôt URL YouTube ho·∫∑c tr·∫£ v·ªÅ ch√≠nh n√≥ n·∫øu ƒë√£ l√† ID."""
    if not url: return None
    if len(url) == 11 and not url.startswith("http"):
        return url
    parsed_url = urlparse(url)
    if 'youtube.com' in parsed_url.hostname:
        video_id = parse_qs(parsed_url.query).get('v')
        if video_id: return video_id[0]
    elif 'youtu.be' in parsed_url.hostname:
        return parsed_url.path[1:]
    return None

# --- X√°c th·ª±c ng∆∞·ªùi d√πng ---
def get_authenticated_service():
    global youtube_service_global
    with auth_lock:
        if youtube_service_global:
            return youtube_service_global

        log_status(f"Y√™u c·∫ßu x√°c th·ª±c...")
        if not os.path.exists(CLIENT_SECRETS_FILE):
            log_status(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file client secrets: {CLIENT_SECRETS_FILE}")
            messagebox.showerror("L·ªói X√°c Th·ª±c", f"Kh√¥ng t√¨m th·∫•y file '{CLIENT_SECRETS_FILE}'.")
            return None
        try:
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, ALL_SCOPES)
            messagebox.showinfo("Y√™u C·∫ßu Quy·ªÅn", "·ª®ng d·ª•ng c·∫ßn quy·ªÅn qu·∫£n l√Ω video, playlist v√† b√¨nh lu·∫≠n c·ªßa b·∫°n.\nB·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng t·ªõi tr√¨nh duy·ªát ƒë·ªÉ c·∫•p quy·ªÅn.")
            credentials = flow.run_local_server(port=0)
            service = build(API_SERVICE_NAME, API_VERSION, credentials=credentials)
            
            youtube_service_global = service
            log_status("X√°c th·ª±c th√†nh c√¥ng. D·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c l∆∞u.")
            
            threading.Thread(target=fetch_my_playlists, daemon=True).start()
            return service
        except Exception as e:
            log_status(f"L·ªói x√°c th·ª±c: {e}")
            messagebox.showerror("L·ªói X√°c Th·ª±c", f"Could not authenticate with Google: {e}")
            return None

# --- C√°c h√†m t∆∞∆°ng t√°c v·ªõi YouTube API ---
def add_video_to_playlist(youtube, video_id, playlist_id):
    if not playlist_id: return
    log_status(f"ƒêang th√™m video {video_id} v√†o playlist {playlist_id}...")
    try:
        youtube.playlistItems().insert(part="snippet", body={"snippet": {"playlistId": playlist_id, "resourceId": {"kind": "youtube#video", "videoId": video_id}}}).execute()
        log_status(f"ƒê√£ th√™m video {video_id} v√†o playlist {playlist_id} th√†nh c√¥ng.")
    except HttpError as e:
        log_status(f"L·ªói API khi th√™m video v√†o playlist: {e}")
        messagebox.showwarning("L·ªói Playlist", f"Video ƒë√£ ƒë∆∞·ª£c upload, nh∆∞ng kh√¥ng th·ªÉ th√™m v√†o playlist:\n{e}")

def upload_video(youtube, video_file_path, title, description, thumbnail_path=None, publish_time_utc_iso=None, playlist_id=None):
    if not youtube:
        messagebox.showerror("L·ªói Upload", "C·∫ßn x√°c th·ª±c tr∆∞·ªõc khi upload.")
        return None
    body = {'snippet': {'title': title, 'description': description, 'categoryId': '22'}, 'status': {'privacyStatus': 'private' if publish_time_utc_iso else 'public', 'publishAt': publish_time_utc_iso, 'selfDeclaredMadeForKids': False}}
    log_status(f"B·∫Øt ƒë·∫ßu upload: '{title}'")
    try:
        media = MediaFileUpload(video_file_path, mimetype='video/*', resumable=True)
        request = youtube.videos().insert(part='snippet,status', body=body, media_body=media)
        response, last_progress = None, -1
        while response is None:
            status, response = request.next_chunk()
            if status:
                progress = int(status.progress() * 100)
                if progress > last_progress: log_status(f"ƒêang upload '{title}': {progress}%"); last_progress = progress
        
        video_id = response['id']
        log_status(f"Upload video '{title}' th√†nh c√¥ng. Video ID: {video_id}")
        if playlist_id: add_video_to_playlist(youtube, video_id, playlist_id)
        if thumbnail_path and os.path.exists(thumbnail_path):
            log_status(f"B·∫Øt ƒë·∫ßu upload thumbnail cho video ID: {video_id}")
            youtube.thumbnails().set(videoId=video_id, media_body=MediaFileUpload(thumbnail_path, mimetype='image/*')).execute()
            log_status(f"Upload thumbnail th√†nh c√¥ng cho video ID: {video_id}")
        return response
    except Exception as e:
        log_status(f"L·ªói trong qu√° tr√¨nh upload '{title}': {e}")
        messagebox.showerror("L·ªói Upload", f"ƒê√£ x·∫£y ra l·ªói khi upload '{title}':\n{e}")
        return None

def delete_video_api(service, video_id):
    """G·ª≠i y√™u c·∫ßu x√≥a video vƒ©nh vi·ªÖn tr√™n YouTube."""
    try:
        service.videos().delete(id=video_id).execute()
        log_status(f"ƒê√£ g·ª≠i y√™u c·∫ßu x√≥a Video ID: {video_id} tr√™n YouTube.")
        return True
    except HttpError as e:
        log_status(f"L·ªói API khi x√≥a video {video_id}: {e}")
        messagebox.showerror("L·ªói API", f"Kh√¥ng th·ªÉ x√≥a video tr√™n YouTube:\n{e}")
        return False

def fetch_trending_videos_api(region_code, max_results=25):
    service = get_authenticated_service()
    if not service: return None
    try:
        response = service.videos().list(part="snippet,statistics,id", chart="mostPopular", regionCode=region_code, maxResults=max_results).execute()
        items = response.get('items', [])
        log_status(f"ƒê√£ l·∫•y {len(items)} video th·ªãnh h√†nh cho khu v·ª±c: {region_code}")
        return items
    except HttpError as e:
        messagebox.showerror("L·ªói API", f"Kh√¥ng th·ªÉ l·∫•y video th·ªãnh h√†nh cho khu v·ª±c '{region_code}':\n{e}")
        return None

def post_comment_api(video_id, comment_text):
    log_status(f"ƒêang th·ª≠ ƒëƒÉng b√¨nh lu·∫≠n tr√™n Video ID: {video_id}")
    service = get_authenticated_service()
    if not service:
        messagebox.showerror("L·ªói B√¨nh Lu·∫≠n", "Y√™u c·∫ßu x√°c th·ª±c ƒë·ªÉ ƒëƒÉng b√¨nh lu·∫≠n.")
        return
    try:
        request_body = { "snippet": { "videoId": video_id, "topLevelComment": { "snippet": { "textOriginal": comment_text }}}}
        response = service.commentThreads().insert(part="snippet", body=request_body).execute()
        log_status(f"ƒêƒÉng b√¨nh lu·∫≠n th√†nh c√¥ng. Comment ID: {response['id']}")
        messagebox.showinfo("Th√†nh C√¥ng", f"ƒê√£ ƒëƒÉng b√¨nh lu·∫≠n th√†nh c√¥ng tr√™n Video ID: {video_id}")
    except HttpError as e:
        log_status(f"L·ªói API khi ƒëƒÉng b√¨nh lu·∫≠n: {e}")
        error_content = json.loads(e.content.decode('utf-8'))
        error_message = error_content.get('error', {}).get('message', str(e))
        messagebox.showerror("L·ªói ƒêƒÉng B√¨nh Lu·∫≠n", f"Kh√¥ng th·ªÉ ƒëƒÉng b√¨nh lu·∫≠n:\n{error_message}")
    finally:
        if root.winfo_exists():
            root.after(0, set_comment_manage_buttons_state, tk.NORMAL)
            if status_bar_instance:
                root.after(0, status_bar_instance.hide_progress)
                root.after(0, status_bar_instance.clear)

def fetch_video_stats_api(video_id):
    service = get_authenticated_service()
    if not service: return None, "Ch∆∞a x√°c th·ª±c."
    try:
        response = service.videos().list(part="snippet,statistics", id=video_id).execute()
        items = response.get('items', [])
        return (items[0], None) if items else (None, "Kh√¥ng t√¨m th·∫•y video.")
    except HttpError as e:
        return None, f"L·ªói API: {e}"

def fetch_my_playlists_api():
    service = get_authenticated_service()
    if not service: return None
    log_status("ƒêang l·∫•y danh s√°ch playlist...")
    playlists = []
    try:
        request = service.playlists().list(part="snippet", mine=True, maxResults=50)
        while request:
            response = request.execute()
            playlists.extend(response.get('items', []))
            request = service.playlists().list_next(request, response)
        log_status(f"ƒê√£ l·∫•y {len(playlists)} playlist.")
        return playlists
    except HttpError as e:
        messagebox.showerror("L·ªói API", f"Kh√¥ng th·ªÉ l·∫•y danh s√°ch playlist c·ªßa b·∫°n:\n{e}")
        return None

def fetch_video_comments_api(video_id, max_results=100):
    service = get_authenticated_service()
    if not service: return None, "Ch∆∞a x√°c th·ª±c."
    log_status(f"ƒêang l·∫•y b√¨nh lu·∫≠n cho Video ID: {video_id}...")
    try:
        response = service.commentThreads().list(part="snippet", videoId=video_id, maxResults=min(max_results, 100), textFormat="plainText", order="relevance").execute()
        comments = [item['snippet']['topLevelComment']['snippet']['textDisplay'] for item in response.get('items', [])]
        log_status(f"ƒê√£ l·∫•y {len(comments)} b√¨nh lu·∫≠n th√†nh c√¥ng.")
        return comments, None
    except HttpError as e:
        error_detail = "B√¨nh lu·∫≠n ƒë√£ b·ªã t·∫Øt cho video n√†y." if "disabled comments" in str(e).lower() else f"L·ªói API: {e}"
        return None, error_detail

# --- X·ª≠ l√Ω file JSON ---
def get_json_data(filepath):
    if not os.path.exists(filepath): return []
    try:
        with open(filepath, 'r', encoding='utf-8') as f: content = f.read()
        return json.loads(content) if content.strip() else []
    except (json.JSONDecodeError, IOError) as e:
        messagebox.showerror("L·ªói File", f"L·ªói ƒë·ªçc file '{filepath}':\n{e}")
        return []

def save_json_data(data, filepath):
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except IOError as e:
        messagebox.showerror("L·ªói File", f"Kh√¥ng th·ªÉ l∆∞u file '{filepath}':\n{e}")

# --- Logic c·ªßa b·ªô l·∫≠p l·ªãch ---
def process_scheduled_posts():
    global scheduled_posts_data
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    posts_to_process_indices = [i for i, post in enumerate(scheduled_posts_data) if post.get('status') == 'pending' and datetime.datetime.fromisoformat(post.get('scheduled_time', '9999-01-01T00:00:00Z').replace('Z', '+00:00')) <= now_utc + datetime.timedelta(minutes=1)]
    if not posts_to_process_indices: return
    
    service = get_authenticated_service()
    if not service: return
    
    processed_something = False
    for index in posts_to_process_indices:
        post = scheduled_posts_data[index]
        response = upload_video(service, post['video_path'], post['title'], post['description'], post.get('thumbnail_path'), post['scheduled_time'], post.get('playlist_id'))
        if response:
            scheduled_posts_data[index]['status'] = 'uploaded'
            scheduled_posts_data[index]['video_id'] = response.get('id')
        else:
            scheduled_posts_data[index]['status'] = 'error_upload'
        processed_something = True
    
    if processed_something:
        save_json_data(scheduled_posts_data, SCHEDULED_POSTS_FILE)
        status_queue.put("update_ui")

def run_scheduler():
    log_status("Ti·∫øn tr√¨nh l·∫≠p l·ªãch ƒë√£ b·∫Øt ƒë·∫ßu.")
    while threading.main_thread().is_alive():
        if vietnam_tz: process_scheduled_posts()
        time.sleep(60)
    log_status("Ti·∫øn tr√¨nh l·∫≠p l·ªãch ƒë√£ d·ª´ng.")

# --- C√°c h√†m Callback v√† H·ªó tr·ª£ cho Giao di·ªán ---
def browse_file(entry_widget, filetypes):
    file_path = filedialog.askopenfilename(initialdir=os.path.expanduser("~"), filetypes=filetypes)
    if file_path:
        entry_widget.delete(0, tk.END)
        entry_widget.insert(0, file_path)

def validate_inputs(check_time=True):
    video_path = video_path_entry.get_value()
    title = title_entry.get_value()
    if not video_path or not os.path.exists(video_path):
        messagebox.showerror("L·ªói ƒê·∫ßu V√†o", f"File video kh√¥ng h·ª£p l·ªá:\n{video_path}")
        return False, None, None
    if not title:
        messagebox.showerror("L·ªói ƒê·∫ßu V√†o", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ.")
        return False, None, None
    
    utc_dt, utc_iso_str = None, None
    if check_time:
        scheduled_time_str_vn = datetime_entry.get_value()
        if not scheduled_time_str_vn:
            messagebox.showerror("L·ªói ƒê·∫ßu V√†o", "Vui l√≤ng nh·∫≠p th·ªùi gian l√™n l·ªãch.")
            return False, None, None
        utc_dt, utc_iso_str = convert_vn_str_to_utc_iso(scheduled_time_str_vn)
        if utc_dt is None: return False, None, None
    return True, utc_dt, utc_iso_str

def set_uploader_buttons_state(state=tk.NORMAL):
    for btn in [upload_now_btn, schedule_btn, clear_btn, refresh_playlists_btn]:
        if btn: btn.config(state=state)

def schedule_upload_ui():
    is_valid, utc_dt, scheduled_time_utc_iso = validate_inputs(check_time=True)
    if not is_valid: return
    if utc_dt <= datetime.datetime.now(datetime.timezone.utc) + datetime.timedelta(minutes=2):
        messagebox.showerror("L·ªói ƒê·∫ßu V√†o", "Th·ªùi gian l√™n l·ªãch ph·∫£i ·ªü trong t∆∞∆°ng lai √≠t nh·∫•t v√†i ph√∫t.")
        return

    selected_playlist_name = playlist_combobox.get()
    new_post = {"video_path": video_path_entry.get_value(), "title": title_entry.get_value(), "description": description_text.get("1.0", tk.END).strip(), "scheduled_time": scheduled_time_utc_iso, "thumbnail_path": thumbnail_path_entry.get_value(), "playlist_id": my_playlists.get(selected_playlist_name), "status": "pending", "video_id": None}
    scheduled_posts_data.append(new_post)
    save_json_data(scheduled_posts_data, SCHEDULED_POSTS_FILE)
    messagebox.showinfo("Th√†nh C√¥ng", f"ƒê√£ l√™n l·ªãch upload video '{new_post['title']}'.")
    clear_input_fields()
    refresh_scheduled_list()

def upload_now_ui():
    is_valid, _, _ = validate_inputs(check_time=False)
    if not is_valid or not messagebox.askyesno("X√°c Nh·∫≠n", "B·∫°n c√≥ mu·ªën upload video n√†y ngay l·∫≠p t·ª©c v·ªõi ch·∫ø ƒë·ªô C√¥ng khai?"): return

    video_path, title, description, thumbnail_path = video_path_entry.get_value(), title_entry.get_value(), description_text.get("1.0", tk.END).strip(), thumbnail_path_entry.get_value()
    playlist_id = my_playlists.get(playlist_combobox.get())
    
    def upload_task():
        set_uploader_buttons_state(tk.DISABLED)
        status_bar_instance.show_progress()
        service = get_authenticated_service()
        if service:
            response = upload_video(service, video_path, title, description, thumbnail_path, None, playlist_id)
            if response:
                messagebox.showinfo("Upload Th√†nh C√¥ng", f"ƒê√£ upload th√†nh c√¥ng video '{title}'.")
                new_post = {"video_path": video_path, "title": title, "description": description, "scheduled_time": None, "thumbnail_path": thumbnail_path, "playlist_id": playlist_id, "status": "uploaded", "video_id": response.get('id')}
                scheduled_posts_data.append(new_post)
                save_json_data(scheduled_posts_data, SCHEDULED_POSTS_FILE)
                status_queue.put("update_ui")
                root.after(0, clear_input_fields)
        
        root.after(0, set_uploader_buttons_state, tk.NORMAL)
        root.after(0, status_bar_instance.hide_progress)
        root.after(0, status_bar_instance.clear)

    threading.Thread(target=upload_task, daemon=True).start()

def refresh_scheduled_list():
    scheduled_list_treeview.delete(*scheduled_list_treeview.get_children())
    for i, post in enumerate(scheduled_posts_data):
        time_vn_str = convert_utc_to_vn_str(post['scheduled_time']) if post.get('scheduled_time') else "Uploaded Now"
        playlist_name = next((name for name, pid in my_playlists.items() if pid == post.get('playlist_id')), "None")
        tags = ('oddrow' if i % 2 else 'evenrow', post.get('status', 'unknown'))
        scheduled_list_treeview.insert('', tk.END, values=(post['title'], time_vn_str, post['status'], playlist_name), iid=str(i), tags=tags)
    update_analyzable_videos_list()

def clear_input_fields():
    for entry in [video_path_entry, title_entry, thumbnail_path_entry, datetime_entry]:
        entry.delete(0, tk.END)
        if isinstance(entry, PlaceholderEntry): entry.put_placeholder()
    description_text.delete("1.0", tk.END)
    playlist_combobox.set('')
    if scheduled_list_treeview.selection(): scheduled_list_treeview.selection_remove(scheduled_list_treeview.selection())

def fetch_my_playlists():
    if refresh_playlists_btn: root.after(0, lambda: refresh_playlists_btn.config(state=tk.DISABLED))
    def task():
        global my_playlists
        playlists_data = fetch_my_playlists_api()
        if playlists_data is not None:
            my_playlists = {p['snippet']['title']: p['id'] for p in playlists_data}
            root.after(0, update_playlist_combobox, list(my_playlists.keys()))
        if refresh_playlists_btn: root.after(0, lambda: refresh_playlists_btn.config(state=tk.NORMAL))
    threading.Thread(target=task, daemon=True).start()

def update_playlist_combobox(playlist_names):
    if playlist_combobox:
        playlist_combobox['values'] = playlist_names
        state = 'readonly' if playlist_names else 'disabled'
        default_text = '' if playlist_names else "Kh√¥ng t√¨m th·∫•y playlist"
        playlist_combobox.config(state=state)
        playlist_combobox.set(default_text)

def fetch_and_display_trending():
    region = region_code_entry.get().strip().upper()
    if len(region) != 2 or not region.isalpha():
        messagebox.showwarning("ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá", "M√£ v√πng ph·∫£i l√† 2 ch·ªØ c√°i (v√≠ d·ª•: VN, US).")
        return
    
    if fetch_trending_btn: fetch_trending_btn.config(state=tk.DISABLED)
    status_bar_instance.show_progress()
    trending_status_label.config(text=f"ƒêang l·∫•y d·ªØ li·ªáu cho {region}...")
    
    def fetch_task():
        global trending_videos_data
        trending_videos_data = fetch_trending_videos_api(region)
        root.after(0, display_trending_results, trending_videos_data, region)
        if fetch_trending_btn: root.after(0, lambda: fetch_trending_btn.config(state=tk.NORMAL))
        root.after(0, status_bar_instance.hide_progress)
        root.after(0, status_bar_instance.clear)

    threading.Thread(target=fetch_task, daemon=True).start()

def display_trending_results(videos, region):
    trending_list_treeview.delete(*trending_list_treeview.get_children())
    if videos is None:
        trending_status_label.config(text=f"L·ªói khi l·∫•y d·ªØ li·ªáu cho {region}")
        return
    if not videos:
        trending_status_label.config(text=f"Kh√¥ng c√≥ video th·ªãnh h√†nh cho {region}")
        return

    trending_status_label.config(text=f"Th·ªãnh h√†nh: {region} ({len(videos)} video)")
    for i, video in enumerate(videos):
        title = video['snippet']['title']
        channel = video['snippet']['channelTitle']
        views = f"{int(video['statistics'].get('viewCount', 0)):,}"
        tags = ('oddrow' if i % 2 else 'evenrow',)
        trending_list_treeview.insert('', tk.END, values=(title, channel, views), iid=str(i), tags=tags)

def refresh_comment_template_listbox():
    comment_template_listbox.delete(0, tk.END)
    for template in comment_templates_list:
        comment_template_listbox.insert(tk.END, template)

def set_comment_manage_buttons_state(state=tk.NORMAL):
    for btn in [add_comment_btn, delete_comment_btn, pick_comment_btn, generate_comments_btn, post_comment_btn]:
        if btn: btn.config(state=state)
    if num_comments_entry: num_comments_entry.config(state='normal' if state == tk.NORMAL else 'disabled')
    if post_comment_btn and not (current_random_comment and video_id_entry_for_comment.get_value()):
        post_comment_btn.config(state=tk.DISABLED)

def add_comment_template():
    new_template = new_comment_entry.get_value().strip()
    if not new_template: return
    if new_template not in comment_templates_list:
        comment_templates_list.append(new_template)
        save_json_data(comment_templates_list, COMMENT_TEMPLATES_FILE)
        refresh_comment_template_listbox()
        new_comment_entry.delete(0, tk.END)

def delete_selected_comment_template():
    selected_indices = comment_template_listbox.curselection()
    if not selected_indices: return
    if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m·∫´u b√¨nh lu·∫≠n n√†y?"):
        del comment_templates_list[selected_indices[0]]
        save_json_data(comment_templates_list, COMMENT_TEMPLATES_FILE)
        refresh_comment_template_listbox()

def pick_random_comment():
    global current_random_comment
    if not comment_templates_list:
        messagebox.showwarning("Danh s√°ch r·ªóng", "Kh√¥ng c√≥ m·∫´u b√¨nh lu·∫≠n n√†o ƒë·ªÉ ch·ªçn.")
        current_random_comment = ""
    else:
        current_random_comment = random.choice(comment_templates_list)
    
    random_comment_display.config(state=tk.NORMAL)
    random_comment_display.delete("1.0", tk.END)
    random_comment_display.insert("1.0", current_random_comment or "Ch∆∞a c√≥ b√¨nh lu·∫≠n n√†o ƒë∆∞·ª£c ch·ªçn.")
    random_comment_display.config(state=tk.DISABLED)
    set_comment_manage_buttons_state(tk.NORMAL)

def post_comment_ui():
    url_or_id = video_id_entry_for_comment.get_value()
    video_id = extract_video_id_from_url(url_or_id)

    if not video_id:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p URL ho·∫∑c ID video h·ª£p l·ªá.")
        return
    if not current_random_comment:
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn m·ªôt b√¨nh lu·∫≠n.")
        return
        
    if messagebox.askyesno("X√°c nh·∫≠n", f"ƒêƒÉng b√¨nh lu·∫≠n n√†y l√™n video {video_id}?"):
        set_comment_manage_buttons_state(tk.DISABLED)
        status_bar_instance.show_progress()
        threading.Thread(target=post_comment_api, args=(video_id, current_random_comment), daemon=True).start()

def generate_meaningful_comments_ui():
    try:
        num_to_generate = int(num_comments_entry.get_value())
        if num_to_generate <= 0: raise ValueError
    except ValueError:
        messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng.")
        return
    
    set_comment_manage_buttons_state(tk.DISABLED)
    status_bar_instance.show_progress()
    
    def task():
        existing_comments_set = set(comment_templates_list)
        newly_generated_comments = set()
        
        attempts = 0
        max_attempts = num_to_generate * 5 + 100

        while len(newly_generated_comments) < num_to_generate and attempts < max_attempts:
            attempts += 1
            base = random.choice(MEANINGFUL_COMMENT_BASES)
            if random.random() < 0.6: base += " " + random.choice(EMOJIS_LIST)
            if random.random() < 0.3: base += " " + random.choice(COMMENT_SUFFIXES)
            final_comment = base.strip()

            if final_comment not in existing_comments_set and final_comment not in newly_generated_comments:
                newly_generated_comments.add(final_comment)
        
        added_count = len(newly_generated_comments)
        if added_count > 0:
            comment_templates_list.extend(list(newly_generated_comments))
            save_json_data(comment_templates_list, COMMENT_TEMPLATES_FILE)
        
        root.after(0, refresh_comment_template_listbox)
        root.after(0, set_comment_manage_buttons_state, tk.NORMAL)
        root.after(0, status_bar_instance.hide_progress)
        root.after(0, status_bar_instance.clear)
        root.after(0, messagebox.showinfo, "Ho√†n t·∫•t", f"ƒê√£ t·∫°o v√† th√™m m·ªõi {added_count}/{num_to_generate} b√¨nh lu·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu.")

    threading.Thread(target=task, daemon=True).start()

def analyze_sentiment(comment):
    comment_lower = comment.lower()
    if any(word in comment_lower for word in NEGATIVE_KEYWORDS_VI): return "Ti√™u c·ª±c"
    if any(word in comment_lower for word in POSITIVE_KEYWORDS_VI): return "T√≠ch c·ª±c"
    return "Trung t√≠nh"

def display_comment_analysis_results(video_data, comments, error):
    clear_analytics_results()
    if error:
        messagebox.showerror("L·ªói Ph√¢n T√≠ch B√¨nh Lu·∫≠n", f"Kh√¥ng th·ªÉ l·∫•y b√¨nh lu·∫≠n:\n{error}")
        return
    if not comments:
        messagebox.showinfo("Ph√¢n T√≠ch B√¨nh Lu·∫≠n", "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n n√†o cho video n√†y.")
        return

    sentiments = [analyze_sentiment(c) for c in comments]
    sentiment_counts = pd.Series(sentiments).value_counts()
    
    fig, ax = plt.subplots(figsize=(6, 3.5), dpi=100)
    colors = {'T√≠ch c·ª±c': 'lightgreen', 'Ti√™u c·ª±c': 'lightcoral', 'Trung t√≠nh': 'lightskyblue'}
    ax.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=140, colors=[colors.get(label, 'grey') for label in sentiment_counts.index])
    ax.axis('equal')
    ax.set_title(f'Ph√¢n T√≠ch C·∫£m X√∫c B√¨nh Lu·∫≠n\n(Tr√™n {len(comments)} b√¨nh lu·∫≠n)')
    
    global canvas_widget
    canvas_widget = FigureCanvasTkAgg(fig, master=analytics_chart_frame)
    canvas_widget.draw(); canvas_widget.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    plt.tight_layout()
    
    pos, neg, neu, total = sentiment_counts.get("T√≠ch c·ª±c", 0), sentiment_counts.get("Ti√™u c·ª±c", 0), sentiment_counts.get("Trung t√≠nh", 0), len(comments)
    
    analytics_report_text.config(state=tk.NORMAL)
    analytics_report_text.delete("1.0", tk.END)
    
    analytics_report_text.insert(tk.END, "B√°o C√°o C·∫£m X√∫c\n", "h1")
    analytics_report_text.insert(tk.END, f"{video_data['snippet']['title']}\n\n", "h2")
    analytics_report_text.insert(tk.END, "T·ªïng b√¨nh lu·∫≠n ph√¢n t√≠ch: ", "bold")
    analytics_report_text.insert(tk.END, f"{total}\n\n")
    
    analytics_report_text.insert(tk.END, "T√≠ch c·ª±c: ", "bold")
    analytics_report_text.insert(tk.END, f"{pos} ({pos/total:.1%})\n", "positive")
    
    analytics_report_text.insert(tk.END, "Ti√™u c·ª±c: ", "bold")
    analytics_report_text.insert(tk.END, f"{neg} ({neg/total:.1%})\n", "negative")
    
    analytics_report_text.insert(tk.END, "Trung t√≠nh: ", "bold")
    analytics_report_text.insert(tk.END, f"{neu} ({neu/total:.1%})", "neutral")
    
    analytics_report_text.config(state=tk.DISABLED)

def analyze_selected_video_ui():
    video_id, _ = get_video_id_for_analysis()
    if not video_id: return
    _trigger_analysis_task(video_id)

def analyze_comments_ui():
    video_id, _ = get_video_id_for_analysis()
    if not video_id: return
    set_analytics_buttons_state(tk.DISABLED)
    status_bar_instance.show_progress()
    def task():
        video_data, error1 = fetch_video_stats_api(video_id)
        if error1:
            root.after(0, lambda: messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video:\n{error1}"))
            root.after(0, set_analytics_buttons_state, tk.NORMAL)
            root.after(0, status_bar_instance.hide_progress)
            return
            
        comments, error2 = fetch_video_comments_api(video_id)
        root.after(0, display_comment_analysis_results, video_data, comments, error2)
        root.after(0, set_analytics_buttons_state, tk.NORMAL)
        root.after(0, status_bar_instance.hide_progress)
    threading.Thread(target=task, daemon=True).start()

def get_video_id_for_analysis():
    custom_url = custom_video_url_entry.get_value()
    if custom_url:
        video_id = extract_video_id_from_url(custom_url)
        if not video_id:
            messagebox.showerror("URL kh√¥ng h·ª£p l·ªá", "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t ID video t·ª´ URL ho·∫∑c ID ƒë√£ nh·∫≠p.")
            return None, None
        return video_id, f"Custom ID: {video_id}"
    elif analytics_video_combobox.current() != -1:
        selected_title = analytics_video_combobox.get()
        return analytics_video_combobox.video_map.get(selected_title), selected_title
    else:
        messagebox.showwarning("Ch∆∞a Ch·ªçn Video", "Vui l√≤ng ch·ªçn m·ªôt video t·ª´ danh s√°ch ho·∫∑c nh·∫≠p URL/ID t√πy ch·ªânh.")
        return None, None

def _trigger_analysis_task(video_id):
    clear_analytics_results()
    set_analytics_buttons_state(tk.DISABLED)
    status_bar_instance.show_progress()
    def task():
        video_data, error = fetch_video_stats_api(video_id)
        root.after(0, lambda: display_analysis_results(video_data, error))
        root.after(0, set_analytics_buttons_state, tk.NORMAL)
        root.after(0, status_bar_instance.hide_progress)
    threading.Thread(target=task, daemon=True).start()

def display_analysis_results(video_data, error):
    clear_analytics_results()
    if error or not video_data:
        messagebox.showerror("L·ªói Ph√¢n T√≠ch", f"Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu: {error}")
        return
    stats = video_data.get('statistics', {})
    views = int(stats.get('viewCount', 0))
    likes = int(stats.get('likeCount', 0))
    comments = int(stats.get('commentCount', 0))
    
    fig, ax = plt.subplots(figsize=(6, 3.5), dpi=100)
    metrics, counts = ['L∆∞·ª£t xem', 'Th√≠ch', 'B√¨nh lu·∫≠n'], [views, likes, comments]
    ax.bar(metrics, counts, color=['skyblue', 'lightcoral', 'lightgreen'])
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    ax.set_title(f'Th·ªëng K√™ Hi·ªáu Su·∫•t Video')
    plt.tight_layout()

    global canvas_widget
    canvas_widget = FigureCanvasTkAgg(fig, master=analytics_chart_frame)
    canvas_widget.draw(); canvas_widget.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    
    analytics_report_text.config(state=tk.NORMAL)
    analytics_report_text.delete("1.0", tk.END)
    analytics_report_text.insert(tk.END, "B√°o C√°o Th·ªëng K√™\n", "h1")
    analytics_report_text.insert(tk.END, f"{video_data['snippet']['title']}\n\n", "h2")
    analytics_report_text.insert(tk.END, "L∆∞·ª£t xem: ", "bold")
    analytics_report_text.insert(tk.END, f"{views:,}\n")
    analytics_report_text.insert(tk.END, "L∆∞·ª£t th√≠ch: ", "bold")
    analytics_report_text.insert(tk.END, f"{likes:,}\n")
    analytics_report_text.insert(tk.END, "B√¨nh lu·∫≠n: ", "bold")
    analytics_report_text.insert(tk.END, f"{comments:,}")
    analytics_report_text.config(state=tk.DISABLED)

def update_analyzable_videos_list():
    uploaded_videos = [f"{post['title']} ({post['video_id']})" for post in scheduled_posts_data if post.get('status') == 'uploaded' and post.get('video_id')]
    analytics_video_combobox.video_map = {f"{post['title']} ({post['video_id']})": post['video_id'] for post in scheduled_posts_data if post.get('status') == 'uploaded' and post.get('video_id')}
    
    state = 'readonly' if uploaded_videos else 'disabled'
    default_text = '' if uploaded_videos else "Kh√¥ng c√≥ video ƒë√£ upload"
    analytics_video_combobox['values'] = uploaded_videos
    analytics_video_combobox.config(state=state)
    analytics_video_combobox.set(default_text)
    set_analytics_buttons_state(tk.NORMAL)

def clear_analytics_results():
    global canvas_widget
    if canvas_widget:
        canvas_widget.get_tk_widget().destroy()
        canvas_widget = None
        plt.close('all')
    if analytics_report_text:
        analytics_report_text.config(state=tk.NORMAL)
        analytics_report_text.delete("1.0", tk.END)
        analytics_report_text.config(state=tk.DISABLED)

def set_analytics_buttons_state(state):
    can_analyze = (analytics_video_combobox.current() != -1) or (custom_video_url_entry.get_value())
    final_state = state if can_analyze else tk.DISABLED
    if analyze_video_btn: analyze_video_btn.config(state=final_state)
    if analyze_comments_btn: analyze_comments_btn.config(state=final_state)

def check_status_queue():
    try:
        message = status_queue.get_nowait()
        if message == "update_ui":
            refresh_scheduled_list()
    except queue.Empty: pass
    finally:
        root.after(1500, check_status_queue)
        
# --- Main Application Setup ---
if __name__ == "__main__":
    try: root = ThemedTk(theme="arc")
    except tk.TclError: root = tk.Tk()

    root.title("YouTube Automation Tool Pro")
    root.geometry("1100x850")
    
    style = ttk.Style(root)
    style.configure("Treeview.Heading", font=('Helvetica', 10, 'bold'))
    style.configure("TButton", padding=6, font=('Helvetica', 9))
    style.configure("TLabelframe.Label", font=('Helvetica', 11, 'bold'))
    style.configure("TNotebook.Tab", padding=(12, 8), font=('Helvetica', 10, 'bold'))

    if not initialize_timezone(): root.destroy(); exit()
    load_icons()

    scheduled_posts_data = get_json_data(SCHEDULED_POSTS_FILE)
    comment_templates_list = get_json_data(COMMENT_TEMPLATES_FILE)
    
    status_bar_instance = StatusBar(root)
    status_bar_instance.pack(side=tk.BOTTOM, fill=tk.X, padx=5, pady=(5, 0))
    notebook = ttk.Notebook(root)
    notebook.pack(pady=10, padx=10, fill="both", expand=True)

    # === Tab 1: Upload & L√™n l·ªãch ===
    uploader_tab = ttk.Frame(notebook, padding="15")
    notebook.add(uploader_tab, text=' Upload & L√™n l·ªãch ')
    input_frame = ttk.LabelFrame(uploader_tab, text=" Chi Ti·∫øt Video ", padding="15")
    input_frame.grid(row=0, column=0, sticky="nsew")
    input_frame.columnconfigure(1, weight=1)
    
    ttk.Label(input_frame, text="File Video:").grid(row=0, column=0, padx=5, pady=8, sticky="w")
    video_path_entry = PlaceholderEntry(input_frame, placeholder="Nh·∫•n Browse ƒë·ªÉ ch·ªçn file video")
    video_path_entry.grid(row=0, column=1, padx=5, pady=8, sticky="ew")
    ttk.Button(input_frame, text="Browse...", image=icons.get('browse'), compound="left", command=lambda: browse_file(video_path_entry, [("Video Files", "*.mp4 *.avi *.mov")])).grid(row=0, column=2, padx=5, pady=8)
    
    ttk.Label(input_frame, text="Ti√™u ƒë·ªÅ:").grid(row=1, column=0, padx=5, pady=8, sticky="w")
    title_entry = PlaceholderEntry(input_frame, placeholder="Nh·∫≠p ti√™u ƒë·ªÅ video")
    title_entry.grid(row=1, column=1, columnspan=2, padx=5, pady=8, sticky="ew")

    ttk.Label(input_frame, text="M√¥ t·∫£:").grid(row=2, column=0, padx=5, pady=8, sticky="nw")
    description_text = scrolledtext.ScrolledText(input_frame, height=5, width=50, wrap=tk.WORD, relief=tk.SOLID, borderwidth=1)
    description_text.grid(row=2, column=1, columnspan=2, padx=5, pady=8, sticky="ew")
    
    ttk.Label(input_frame, text="Thumbnail:").grid(row=3, column=0, padx=5, pady=8, sticky="w")
    thumbnail_path_entry = PlaceholderEntry(input_frame, placeholder="T√πy ch·ªçn: Ch·ªçn ·∫£nh thumbnail")
    thumbnail_path_entry.grid(row=3, column=1, padx=5, pady=8, sticky="ew")
    ttk.Button(input_frame, text="Browse...", image=icons.get('browse'), compound="left", command=lambda: browse_file(thumbnail_path_entry, [("Image Files", "*.png *.jpg")])).grid(row=3, column=2, padx=5, pady=8)
    
    ttk.Label(input_frame, text="Playlist:").grid(row=4, column=0, padx=5, pady=8, sticky="w")
    playlist_combobox = ttk.Combobox(input_frame, state='disabled')
    playlist_combobox.grid(row=4, column=1, sticky="ew", padx=5, pady=8)
    refresh_playlists_btn = ttk.Button(input_frame, text="L√†m m·ªõi", image=icons.get('refresh'), compound="left", command=fetch_my_playlists)
    refresh_playlists_btn.grid(row=4, column=2, padx=5, pady=8)
    
    ttk.Label(input_frame, text="L√™n l·ªãch (VN):").grid(row=5, column=0, padx=5, pady=8, sticky="w")
    datetime_entry = PlaceholderEntry(input_frame, placeholder="YYYY-MM-DD HH:MM:SS")
    datetime_entry.grid(row=5, column=1, padx=5, pady=8, sticky="ew")

    button_frame_input = ttk.Frame(input_frame)
    button_frame_input.grid(row=6, column=0, columnspan=3, pady=(20, 5))
    upload_now_btn = ttk.Button(button_frame_input, text="Upload Ngay", image=icons.get('upload'), compound="left", command=upload_now_ui)
    upload_now_btn.pack(side=tk.LEFT, padx=10)
    schedule_btn = ttk.Button(button_frame_input, text="L√™n L·ªãch", image=icons.get('schedule'), compound="left", command=schedule_upload_ui)
    schedule_btn.pack(side=tk.LEFT, padx=10)
    clear_btn = ttk.Button(button_frame_input, text="X√≥a Form", image=icons.get('clear'), compound="left", command=clear_input_fields)
    clear_btn.pack(side=tk.LEFT, padx=10)
    
    list_frame = ttk.LabelFrame(uploader_tab, text=" Video ƒë√£ l√™n l·ªãch & Upload ", padding="10")
    list_frame.grid(row=1, column=0, sticky="nsew", pady=(20, 0))
    list_frame.rowconfigure(0, weight=1); list_frame.columnconfigure(0, weight=1)
    
    columns_sched = ('title', 'time_vn', 'status', 'playlist')
    scheduled_list_treeview = ttk.Treeview(list_frame, columns=columns_sched, show='headings', height=8)
    scheduled_list_treeview.heading('title', text='Ti√™u ƒë·ªÅ', anchor='w'); scheduled_list_treeview.column('title', width=350, stretch=tk.YES, anchor='w')
    scheduled_list_treeview.heading('time_vn', text='Th·ªùi gian (VN)', anchor='c'); scheduled_list_treeview.column('time_vn', width=160, stretch=tk.NO, anchor='c')
    scheduled_list_treeview.heading('status', text='Tr·∫°ng th√°i', anchor='c'); scheduled_list_treeview.column('status', width=100, stretch=tk.NO, anchor='c')
    scheduled_list_treeview.heading('playlist', text='Playlist', anchor='w'); scheduled_list_treeview.column('playlist', width=150, stretch=tk.NO, anchor='w')
    
    scheduled_list_treeview.tag_configure('uploaded', foreground='green'); scheduled_list_treeview.tag_configure('pending', foreground='blue'); scheduled_list_treeview.tag_configure('error_upload', foreground='red')
    scheduled_list_treeview.tag_configure('oddrow', background='#F0F0F0')

    scrollbar_sched = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=scheduled_list_treeview.yview)
    scheduled_list_treeview.configure(yscroll=scrollbar_sched.set)
    scheduled_list_treeview.grid(row=0, column=0, sticky="nsew"); scrollbar_sched.grid(row=0, column=1, sticky="ns")
    
    scheduled_context_menu = create_context_menu(scheduled_list_treeview)
    def handle_scheduled_context(action):
        if not scheduled_list_treeview.selection(): return
        selected_iid = scheduled_list_treeview.selection()[0]
        post_index = int(selected_iid)
        post = scheduled_posts_data[post_index]
        video_id = post.get('video_id')

        if action == 'copy_id' and video_id:
            root.clipboard_clear(); root.clipboard_append(video_id)
            log_status(f"ƒê√£ sao ch√©p Video ID: {video_id}")
        
        elif action == 'delete_from_list':
            del scheduled_posts_data[post_index]
            save_json_data(scheduled_posts_data, SCHEDULED_POSTS_FILE)
            refresh_scheduled_list()

        elif action == 'delete_on_yt' and video_id:
            title = post.get('title', 'video n√†y')
            if messagebox.askyesno("X√ÅC NH·∫¨N X√ìA Vƒ®NH VI·ªÑN", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a '{title}' kh·ªèi YouTube kh√¥ng?\nH√ÄNH ƒê·ªòNG N√ÄY KH√îNG TH·ªÇ HO√ÄN T√ÅC!", icon='warning'):
                service = get_authenticated_service()
                if service and delete_video_api(service, video_id):
                    scheduled_posts_data[post_index]['status'] = 'deleted_on_youtube'
                    save_json_data(scheduled_posts_data, SCHEDULED_POSTS_FILE)
                    refresh_scheduled_list()
                    messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a video '{title}' kh·ªèi YouTube.")

    scheduled_context_menu.add_command(label="Sao ch√©p Video ID", command=lambda: handle_scheduled_context('copy_id'))
    scheduled_context_menu.add_command(label="X√≥a kh·ªèi danh s√°ch n√†y", command=lambda: handle_scheduled_context('delete_from_list'))
    scheduled_context_menu.add_separator()
    scheduled_context_menu.add_command(label="X√≥a tr√™n YouTube (Vƒ©nh vi·ªÖn)", command=lambda: handle_scheduled_context('delete_on_yt'))


    uploader_tab.rowconfigure(1, weight=1); uploader_tab.columnconfigure(0, weight=1)

    # === Tab 2: Video Th·ªãnh H√†nh ===
    trending_tab = ttk.Frame(notebook, padding="15")
    notebook.add(trending_tab, text=' Video Th·ªãnh H√†nh ')
    trending_controls_frame = ttk.Frame(trending_tab)
    trending_controls_frame.pack(pady=10, fill="x")
    ttk.Label(trending_controls_frame, text="M√£ v√πng:").pack(side=tk.LEFT, padx=(0, 5))
    region_code_entry = ttk.Entry(trending_controls_frame, width=5)
    region_code_entry.insert(0, "VN")
    region_code_entry.pack(side=tk.LEFT, padx=5)
    fetch_trending_btn = ttk.Button(trending_controls_frame, text="L·∫•y Video", image=icons.get('trending'), compound="left", command=fetch_and_display_trending)
    fetch_trending_btn.pack(side=tk.LEFT, padx=10)
    trending_status_label = ttk.Label(trending_controls_frame, text="Nh·∫≠p m√£ v√πng g·ªìm 2 ch·ªØ c√°i (v√≠ d·ª•: VN, US, JP)")
    trending_status_label.pack(side=tk.LEFT, padx=10, fill='x', expand=True)

    trending_list_frame = ttk.LabelFrame(trending_tab, text=" Top Video Th·ªãnh H√†nh ", padding="10")
    trending_list_frame.pack(pady=10, fill="both", expand=True)
    columns_trend = ('title', 'channel', 'views')
    trending_list_treeview = ttk.Treeview(trending_list_frame, columns=columns_trend, show='headings')
    trending_list_treeview.heading('title', text='Ti√™u ƒë·ªÅ', anchor='w'); trending_list_treeview.column('title', width=500, stretch=tk.YES, anchor='w')
    trending_list_treeview.heading('channel', text='K√™nh', anchor='w'); trending_list_treeview.column('channel', width=200, stretch=tk.NO, anchor='w')
    trending_list_treeview.heading('views', text='L∆∞·ª£t xem', anchor='e'); trending_list_treeview.column('views', width=120, stretch=tk.NO, anchor='e')
    trending_list_treeview.tag_configure('oddrow', background='#F0F0F0')

    scrollbar_trend = ttk.Scrollbar(trending_list_frame, orient=tk.VERTICAL, command=trending_list_treeview.yview)
    trending_list_treeview.configure(yscroll=scrollbar_trend.set)
    trending_list_treeview.pack(side=tk.LEFT, fill="both", expand=True); scrollbar_trend.pack(side=tk.RIGHT, fill="y")
    
    trending_context_menu = create_context_menu(trending_list_treeview)
    def handle_trending_context(action):
        if not trending_list_treeview.selection(): return
        video_index = int(trending_list_treeview.selection()[0])
        video_id = trending_videos_data[video_index]['id']
        if action == 'open':
            webbrowser.open_new_tab(f"https://www.youtube.com/watch?v={video_id}")
        elif action == 'copy':
            root.clipboard_clear(); root.clipboard_append(video_id)
    trending_context_menu.add_command(label="M·ªü tr√™n tr√¨nh duy·ªát", command=lambda: handle_trending_context('open'))
    trending_context_menu.add_command(label="Sao ch√©p Video ID", command=lambda: handle_trending_context('copy'))

    # === Tab 3: C√¥ng C·ª• B√¨nh Lu·∫≠n ===
    interaction_tab = ttk.Frame(notebook, padding="15")
    notebook.add(interaction_tab, text=' C√¥ng C·ª• B√¨nh Lu·∫≠n ')
    comment_frame = ttk.LabelFrame(interaction_tab, text=" Qu·∫£n l√Ω M·∫´u B√¨nh Lu·∫≠n ", padding="10")
    comment_frame.grid(row=0, column=0, pady=10, padx=0, sticky="nsew")
    comment_frame.columnconfigure(0, weight=1)

    comment_list_frame = ttk.Frame(comment_frame); comment_list_frame.grid(row=0, column=0, pady=5, sticky='nsew')
    comment_list_frame.columnconfigure(0, weight=1); comment_list_frame.rowconfigure(1, weight=1)
    ttk.Label(comment_list_frame, text="C√°c m·∫´u ƒë√£ l∆∞u:").grid(row=0, column=0, sticky='w', padx=5)
    comment_scrollbar = ttk.Scrollbar(comment_list_frame, orient=tk.VERTICAL)
    comment_template_listbox = tk.Listbox(comment_list_frame, height=8, yscrollcommand=comment_scrollbar.set, relief=tk.SOLID, borderwidth=1, exportselection=False)
    comment_scrollbar.config(command=comment_template_listbox.yview)
    comment_template_listbox.grid(row=1, column=0, sticky='nsew', padx=(5,0), pady=5); comment_scrollbar.grid(row=1, column=1, sticky='ns', pady=5)
    
    comment_input_frame = ttk.Frame(comment_frame); comment_input_frame.grid(row=1, column=0, pady=5, sticky='ew')
    comment_input_frame.columnconfigure(1, weight=1)
    ttk.Label(comment_input_frame, text="Th√™m m·ªõi:").grid(row=0, column=0, padx=(5,2), pady=5, sticky='w')
    new_comment_entry = PlaceholderEntry(comment_input_frame, placeholder="Nh·∫≠p m·∫´u b√¨nh lu·∫≠n m·ªõi...")
    new_comment_entry.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
    add_comment_btn = ttk.Button(comment_input_frame, text="Th√™m", image=icons.get('add'), compound="left", command=add_comment_template)
    add_comment_btn.grid(row=0, column=2, padx=(0,5), pady=5)
    
    delete_comment_btn = ttk.Button(comment_frame, text="X√≥a m·∫´u ƒë√£ ch·ªçn", image=icons.get('delete'), compound="left", command=delete_selected_comment_template)
    delete_comment_btn.grid(row=2, column=0, pady=(5, 0), sticky='w', padx=5)
    
    generate_comments_frame = ttk.LabelFrame(comment_frame, text=" T·∫°o B√¨nh Lu·∫≠n T·ª± ƒê·ªông ", padding="10")
    generate_comments_frame.grid(row=3, column=0, pady=(15,5), sticky="ew")
    ttk.Label(generate_comments_frame, text="S·ªë l∆∞·ª£ng c·∫ßn t·∫°o:").grid(row=0, column=0, padx=5, pady=5, sticky="w")
    num_comments_entry = PlaceholderEntry(generate_comments_frame, placeholder="VD: 50", width=10)
    num_comments_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")
    generate_comments_btn = ttk.Button(generate_comments_frame, text="T·∫°o & Th√™m", image=icons.get('generate'), compound="left", command=generate_meaningful_comments_ui)
    generate_comments_btn.grid(row=0, column=2, padx=5, pady=5, sticky="e")
    generate_comments_frame.columnconfigure(2, weight=1)

    post_frame = ttk.LabelFrame(interaction_tab, text=" ƒêƒÉng B√¨nh Lu·∫≠n ", padding="10")
    post_frame.grid(row=1, column=0, pady=15, padx=0, sticky="nsew")
    post_frame.columnconfigure(1, weight=1)
    
    pick_comment_btn = ttk.Button(post_frame, text="Ch·ªçn Ng·∫´u Nhi√™n", image=icons.get('pick'), compound="left", command=pick_random_comment)
    pick_comment_btn.grid(row=0, column=0, padx=5, pady=5, sticky='w')
    random_comment_display = scrolledtext.ScrolledText(post_frame, height=3, width=60, wrap=tk.WORD, relief=tk.SOLID, borderwidth=1, state=tk.DISABLED)
    random_comment_display.grid(row=1, column=0, columnspan=2, sticky='ew', pady=5, padx=5)
    
    post_action_frame = ttk.Frame(post_frame); post_action_frame.grid(row=2, column=0, columnspan=2, pady=10, sticky='ew')
    ttk.Label(post_action_frame, text="URL/ID Video:").pack(side=tk.LEFT, padx=(5, 5))
    video_id_entry_for_comment = PlaceholderEntry(post_action_frame, placeholder="D√°n URL ho·∫∑c ID video c·∫ßn ƒëƒÉng", width=40)
    video_id_entry_for_comment.pack(side=tk.LEFT, padx=5, expand=True, fill='x')
    video_id_entry_for_comment.bind("<KeyRelease>", lambda event: set_comment_manage_buttons_state(tk.NORMAL))
    post_comment_btn = ttk.Button(post_action_frame, text="ƒêƒÉng B√¨nh Lu·∫≠n", image=icons.get('post'), compound="left", command=post_comment_ui, state=tk.DISABLED)
    post_comment_btn.pack(side=tk.LEFT, padx=10)
    
    interaction_tab.rowconfigure(0, weight=1); interaction_tab.columnconfigure(0, weight=1)
    
    # === Tab 4: Ph√¢n T√≠ch ===
    analytics_tab = ttk.Frame(notebook, padding="15")
    notebook.add(analytics_tab, text=' Ph√¢n T√≠ch ')
    analytics_controls_frame = ttk.LabelFrame(analytics_tab, text="Ch·ªçn Video ƒë·ªÉ Ph√¢n t√≠ch", padding="15")
    analytics_controls_frame.pack(pady=10, fill="x")
    ttk.Label(analytics_controls_frame, text="T·ª´ danh s√°ch ƒë√£ Upload:").grid(row=0, column=0, padx=5, pady=5, sticky='w')
    analytics_video_combobox = ttk.Combobox(analytics_controls_frame, width=45, state='disabled')
    analytics_video_combobox.grid(row=0, column=1, padx=5, pady=5, sticky='ew')
    ttk.Label(analytics_controls_frame, text="Ho·∫∑c nh·∫≠p URL/ID video:").grid(row=1, column=0, padx=5, pady=5, sticky='w')
    custom_video_url_entry = PlaceholderEntry(analytics_controls_frame, placeholder="https://www.youtube.com/watch?v=...", width=48)
    custom_video_url_entry.grid(row=1, column=1, padx=5, pady=5, sticky='ew')
    
    analytics_buttons_frame = ttk.Frame(analytics_controls_frame)
    analytics_buttons_frame.grid(row=2, column=0, columnspan=2, pady=10)
    analyze_video_btn = ttk.Button(analytics_buttons_frame, text="Ph√¢n T√≠ch Th·ªëng K√™", image=icons.get('analyze'), compound="left", command=analyze_selected_video_ui, state=tk.DISABLED)
    analyze_video_btn.pack(side=tk.LEFT, padx=10)
    analyze_comments_btn = ttk.Button(analytics_buttons_frame, text="Ph√¢n T√≠ch B√¨nh Lu·∫≠n", image=icons.get('comment_analyze'), compound="left", command=analyze_comments_ui, state=tk.DISABLED)
    analyze_comments_btn.pack(side=tk.LEFT, padx=10)
    for w in [analytics_video_combobox, custom_video_url_entry]:
        w.bind("<KeyRelease>", lambda e: set_analytics_buttons_state(tk.NORMAL))
        w.bind("<<ComboboxSelected>>", lambda e: set_analytics_buttons_state(tk.NORMAL))

    analytics_controls_frame.columnconfigure(1, weight=1)
    analytics_display_frame = ttk.Frame(analytics_tab); analytics_display_frame.pack(pady=10, fill="both", expand=True)
    analytics_display_frame.columnconfigure(0, weight=1); analytics_display_frame.columnconfigure(1, weight=1); analytics_display_frame.rowconfigure(0, weight=1)
    
    analytics_chart_labelframe = ttk.LabelFrame(analytics_display_frame, text=" Bi·ªÉu ƒë·ªì ", padding="5")
    analytics_chart_labelframe.grid(row=0, column=0, padx=(0, 5), pady=5, sticky="nsew")
    analytics_chart_frame = ttk.Frame(analytics_chart_labelframe); analytics_chart_frame.pack(fill="both", expand=True)
    
    analytics_report_labelframe = ttk.LabelFrame(analytics_display_frame, text=" B√°o c√°o Chi ti·∫øt ", padding="5")
    analytics_report_labelframe.grid(row=0, column=1, padx=(5, 0), pady=5, sticky="nsew")
    analytics_report_text = scrolledtext.ScrolledText(analytics_report_labelframe, wrap=tk.WORD, state=tk.DISABLED, relief=tk.SOLID, borderwidth=1, font=("Helvetica", 10))
    analytics_report_text.pack(fill="both", expand=True, padx=5, pady=5)
    
    analytics_report_text.tag_configure("h1", font=("Helvetica", 14, "bold"), justify='center', spacing3=10)
    analytics_report_text.tag_configure("h2", font=("Helvetica", 11, "italic"), justify='center', spacing3=10)
    analytics_report_text.tag_configure("bold", font=("Helvetica", 10, "bold"))
    analytics_report_text.tag_configure("positive", foreground="#008000")
    analytics_report_text.tag_configure("negative", foreground="#CC0000")
    analytics_report_text.tag_configure("neutral", foreground="#0000CC")

    # === Tab 5: Nh·∫≠t K√Ω ===
    log_tab = ttk.Frame(notebook, padding="15")
    notebook.add(log_tab, text=' Nh·∫≠t K√Ω (Log) ')
    log_frame = ttk.LabelFrame(log_tab, text="Nh·∫≠t k√Ω ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng", padding="10")
    log_frame.pack(fill="both", expand=True)
    log_text_widget = scrolledtext.ScrolledText(log_frame, state='disabled', wrap=tk.WORD, font=("Consolas", 9))
    log_text_widget.pack(fill="both", expand=True)

    # === Kh·ªüi t·∫°o v√† B·∫Øt ƒë·∫ßu c√°c ti·∫øn tr√¨nh ---
    get_authenticated_service()
    refresh_scheduled_list()
    refresh_comment_template_listbox()
    pick_random_comment()
    set_analytics_buttons_state(tk.NORMAL)
    
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    root.after(1500, check_status_queue)
    root.mainloop()

    log_status("·ª®ng d·ª•ng ƒë√£ ƒë√≥ng.")